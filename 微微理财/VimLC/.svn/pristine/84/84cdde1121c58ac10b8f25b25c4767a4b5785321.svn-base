//
//  AddCardViewController.m
//  WTJR
//
//  Created by H on 16/6/5.
//  Copyright © 2016年 HM. All rights reserved.
//

#import "AddCardViewController.h"
#import "PickerChoiceView.h"
#import "LoginViewController.h"
#import "UnderLineField.h"
#import "CustomUIEdgeInsetLabel.h"


@interface AddCardViewController ()<UITextFieldDelegate,UIGestureRecognizerDelegate,PickerChoiceDelegate>

{
    NSString                        *bankIdStr;
}
@property (weak, nonatomic) IBOutlet UnderLineField *UserCardID;
@property (weak, nonatomic) IBOutlet UnderLineField *CardOwn;
@property (weak, nonatomic) IBOutlet UnderLineField *CardNum;
@property (weak, nonatomic) IBOutlet UnderLineField *CardBankChose;
@property (weak, nonatomic) IBOutlet UIButton *TipButton;

@property (nonatomic,strong) NSMutableArray *bankArr;
@property (nonatomic,strong) NSMutableArray *provinceArr;
@property (nonatomic,strong) NSMutableArray *CityArr;


@property (nonatomic,strong) NSMutableDictionary *infoDic;


@property (strong, nonatomic) UITextField *EditTextField;


@end

@implementation AddCardViewController


- (void)viewDidLoad {
    [super viewDidLoad];
    [self createUI];
    [self registNSNotification];
}
- (void)registNSNotification{
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];

    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];

    [self getBankList];
}
- (void)createUI{
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    self.infoDic= [[defaults objectForKey:@"userInfoDetial"] mutableCopy];
    self.TipButton.titleLabel.numberOfLines = 0;
    self.title = @"添加银行卡";
    UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(resignKeyBoard:)];
    [self.view addGestureRecognizer:tapGesture];
    
    
   
    
    
    
    CustomUIEdgeInsetLabel *nameSpace = [[CustomUIEdgeInsetLabel alloc] initWithFrame:CGRectMake(0, 0, 90, 50)];
    nameSpace.textInsets = UIEdgeInsetsMake(0, 10, 0, 0);
    nameSpace.text = @"真实姓名";
    nameSpace.font = TEXTFONT(16);
    nameSpace.textColor = [UIColor colorWithHex:0x666666];
    self.CardOwn.leftView = nameSpace;
    self.CardOwn.leftViewMode = UITextFieldViewModeAlways;
    
    
    CustomUIEdgeInsetLabel *UserCardIDSpace = [[CustomUIEdgeInsetLabel alloc] initWithFrame:CGRectMake(0, 0, 90, 50)];
    UserCardIDSpace.textInsets = UIEdgeInsetsMake(0, 10, 0, 0);
    UserCardIDSpace.text = @"身份证号";
    UserCardIDSpace.font = TEXTFONT(16);
    UserCardIDSpace.textColor = [UIColor colorWithHex:0x666666];
    self.UserCardID.leftView = UserCardIDSpace;
    self.UserCardID.leftViewMode = UITextFieldViewModeAlways;
    

    CustomUIEdgeInsetLabel *CardNumSpace = [[CustomUIEdgeInsetLabel alloc] initWithFrame:CGRectMake(0, 0, 90, 50)];
    CardNumSpace.textInsets = UIEdgeInsetsMake(0, 10, 0, 0);
    CardNumSpace.text = @"银行卡号";
    CardNumSpace.font = TEXTFONT(16);
    CardNumSpace.textColor = [UIColor colorWithHex:0x666666];
    self.CardNum.leftView = CardNumSpace;
    self.CardNum.leftViewMode = UITextFieldViewModeAlways;
    

    CustomUIEdgeInsetLabel *CardBankChoseSpace = [[CustomUIEdgeInsetLabel alloc] initWithFrame:CGRectMake(0, 0, 90, 50)];
    CardBankChoseSpace.textInsets = UIEdgeInsetsMake(0, 10, 0, 0);
    CardBankChoseSpace.text = @"发卡银行";
    CardBankChoseSpace.font = TEXTFONT(16);
    CardBankChoseSpace.textColor = [UIColor colorWithHex:0x666666];
    self.CardBankChose.leftView = CardBankChoseSpace;
    self.CardBankChose.leftViewMode = UITextFieldViewModeAlways;

    UIImageView *BankTypeRight = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 30, 50)];
    BankTypeRight.contentMode = UIViewContentModeCenter;
    BankTypeRight.image = [UIImage imageNamed:@"icon_arrow_right"];
    self.CardBankChose.rightView = BankTypeRight;
    self.CardBankChose.rightViewMode = UITextFieldViewModeAlways;
    
}
- (void)getBankList{
    
    _bankArr = [[NSMutableArray alloc] init];
    [[DataRequestServer getDataRequestServerData] request:@"LunaP2pAppBankTypeServlet" parameters:nil result:^(id result) {
        if ([result isKindOfClass:[NSString class]] &&  [result isEqualToString:@"44"]) {
            [AddHudView addProgressView:self.view message:@"网络错误，请稍后再试"];
        }else{
            int success = [[result objectForKey:@"success"]intValue];
            
            if ([[result objectForKey:@"errorlog"]isEqualToString:@""]&& success==1)
            {
                _bankArr = [[result objectForKey:@"items"] mutableCopy];;
                
            }
            NSLog(@"LunaP2pAppBankTypeServlet= %@",result);
        }
    }];
    

}
- (void)getprovinceList{
    _provinceArr = [[NSMutableArray alloc] init];
    [[DataRequestServer getDataRequestServerData] request:@"LunaP2pAppProvinceServlet" parameters:nil result:^(id result) {
        if ([result isKindOfClass:[NSString class]] &&  [result isEqualToString:@"44"]) {
            [AddHudView addProgressView:self.view message:@"网络错误，请稍后再试"];
        }else{
            int success = [[result objectForKey:@"success"]intValue];
            
            if ([[result objectForKey:@"errorlog"]isEqualToString:@""]&& success==1)
            {
                _provinceArr = [[result objectForKey:@"items"] mutableCopy];;

            }
            NSLog(@"LunaP2pAppProvinceServlet= %@",result);
        }
    }];
    

}

- (void)getcityListSetwithID:(NSString *)ProvinceID{
    NSMutableDictionary *dic= [[NSMutableDictionary alloc] init];
    [dic setObject:ProvinceID forKey:@"province"];
    
    [[DataRequestServer getDataRequestServerData] request:@"LunaP2pAppCityServlet" parameters:dic result:^(id result) {
        if ([result isKindOfClass:[NSString class]] &&  [result isEqualToString:@"44"]) {
            [AddHudView addProgressView:self.view message:@"网络错误，请稍后再试"];
        }else{
            int success = [[result objectForKey:@"success"]intValue];
            
            if ([[result objectForKey:@"errorlog"]isEqualToString:@""]&& success==1)
            {
                _CityArr = [[result objectForKey:@"items"] mutableCopy];;
            }
            NSLog(@"city= %@",result);
        }
    }];
}




- (void)PickerChoice:(NSInteger)index type:(PickerChoiceViewType)choiceType
{
    switch (choiceType) {
        case  PickerBankType:
        {
            NSMutableDictionary *dic = [_bankArr objectAtIndex:index];
            _CardBankChose.text = [dic objectForKey:@"bankType"];
            bankIdStr =[dic objectForKey:@"bankId"];
        }
            break;
        case  PickerProvinceType:{
           
        }
            break;
        case  PickerCityType:{
           
        }
            break;
        default:
            break;
    }
}




- (IBAction)AddCardClick:(id)sender {
    [self KeyboardresignFirstResponder];
    
    if (_CardOwn.text == nil|| [_CardOwn.text isEqualToString:@""]) {
        [AddHudView addProgressView:self.view message:@"请输入持卡人姓名"];
        return;
    }
    
    NSString *UserCardIDStr = [self.UserCardID.text stringByReplacingOccurrencesOfString:@" " withString:@""];

    if (UserCardIDStr == nil|| UserCardIDStr.length<18 ) {
        [AddHudView addProgressView:self.view message:@"请输入持卡人身份证号"];
        return;
    }
    
    if (_CardNum.text == nil|| [_CardNum.text isEqualToString:@""]) {
        [AddHudView addProgressView:self.view message:@"请输入需要绑定的银行卡号"];
        return;
    }
    if ( bankIdStr == nil) {
        [AddHudView addProgressView:self.view message:@"请选择发卡银行"];
        return;
    }
   
    NSString *CardNumStr = [self.CardNum.text stringByReplacingOccurrencesOfString:@" " withString:@""];

   
    NSMutableDictionary *params = [[NSMutableDictionary alloc] init];
    [params setObject:bankIdStr forKey:@"bankId"];
    [params setObject:CardNumStr forKey:@"accountNumber"];
    [params setObject:UserCardIDStr forKey:@"idNumber"];
    [params setObject:_CardOwn.text forKey:@"realName"];

    
    
    [MBProgressHUD showHUDAddedTo:self.view animated:YES];
    [[DataRequestServer getDataRequestServerData] request:@"LunaP2pAppAddBankServlet?add=true" parameters:params result:^(id result) {
        [MBProgressHUD hideHUDForView:self.view animated:YES];

        if ([result isKindOfClass:[NSString class]] &&  [result isEqualToString:@"44"]) {

            [AddHudView addProgressView:self.view message:@"网络错误，请稍后再试"];
        }else if([[result objectForKey:@"success"]intValue]==1 && [[result objectForKey:@"errorlog"]isEqualToString:@""]){
            
            [TalkingData trackEvent:@"绑定银行卡" label:@"绑定成功"];

            [CoreArchive ishasLockedBank:YES];
            
            [AddHudView addProgressView:self.view message:@"绑定银行卡成功"];
            __weak typeof(self) weakSelf = self;
            dispatch_time_t delayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC));
            dispatch_after(delayTime, dispatch_get_main_queue(), ^{
                [weakSelf BackViewController];
            });

        }else if([[result objectForKey:@"errorlog"]isEqualToString:@"noLogin"]&& [[result objectForKey:@"success"]intValue]==1)
        {
            [self requestLogin];
        }else if([[result objectForKey:@"errorlog"]isEqualToString:@"idNumberIllegal"]&& [[result objectForKey:@"success"]intValue]==0)
        {
            [AddHudView addProgressView:self.view message:@"身份证件号码错误，长度不为8-50"];
            
        }else if([[result objectForKey:@"errorlog"]isEqualToString:@"idNumberMustUnique"]&& [[result objectForKey:@"success"]intValue]==0)
        {
            [AddHudView addProgressView:self.view message:@"证件号码已被其他账户绑定"];
        }else if([[result objectForKey:@"errorlog"]isEqualToString:@"identityCannotApplyCauseAuthed"]&& [[result objectForKey:@"success"]intValue]==0)
        {
            [AddHudView addProgressView:self.view message:@"已通过身份认证不能再次申请"];
        }else if([[result objectForKey:@"errorlog"]isEqualToString:@"bankTypeError"]&& [[result objectForKey:@"success"]intValue]==0)
        {
            [AddHudView addProgressView:self.view message:@"银行卡信息输入有误"];
        }else if([[result objectForKey:@"errorlog"]isEqualToString:@"accountNumberError"]&& [[result objectForKey:@"success"]intValue]==0)
        {
            [AddHudView addProgressView:self.view message:@"银行卡信息输入有误"];
        }else if([[result objectForKey:@"errorlog"]isEqualToString:@"bankCountLimitError"]&& [[result objectForKey:@"success"]intValue]==0)
        {
            [AddHudView addProgressView:self.view message:@"绑定银行卡数量已达上限，无法再次添加"];
        }else if([[result objectForKey:@"errorlog"]isEqualToString:@"identityFaild"]&& [[result objectForKey:@"success"]intValue]==0)
        {
            [AddHudView addProgressView:self.view message:@"用户信息输入有误"];
        }
        else{
            [AddHudView addProgressView:self.view message:@"绑卡失败，请检查资料是否正确"];
        }

    }];
    
   
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string{
    if (textField == self.UserCardID) {
        BOOL returnValue = YES;
        NSMutableString* newText = [NSMutableString stringWithCapacity:0];
        [newText appendString:textField.text];// 拿到原有text,根据下面判断可能给它添加" "(空格);
        NSString * noBlankStr = [textField.text stringByReplacingOccurrencesOfString:@" "withString:@""];
        NSInteger textLength = [noBlankStr length];
        
        if (string.length) {
            if (textLength < 18) {//这个20是控制实际字符串长度,比如银行卡号长度
                if (textLength > 0 && textLength %4 == 0) {
                    newText = [NSMutableString stringWithString:[newText stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]]];
                    [newText appendString:@" "];
                    [newText appendString:string];
                    textField.text = newText;
                    returnValue = NO;//为什么return NO?因为textField.text = newText;text已经被我们替换好了,那么就不需要系统帮我们添加了,如果你ruturnYES的话,你会发现会多出一个字符串
                }else {
                    [newText appendString:string];
                }
            }else {
                return NO;
            }
        }else { // 如果输入为空,该怎么地怎么地
            [newText replaceCharactersInRange:range withString:string];
        }
        return returnValue;
    }else if (textField == self.CardNum){
        BOOL returnValue = YES;
        NSMutableString* newText = [NSMutableString stringWithCapacity:0];
        [newText appendString:textField.text];// 拿到原有text,根据下面判断可能给它添加" "(空格);
        NSString * noBlankStr = [textField.text stringByReplacingOccurrencesOfString:@" "withString:@""];
        NSInteger textLength = [noBlankStr length];
        
        if (string.length) {
            if (textLength < 30) {//这个30是控制实际字符串长度,比如银行卡号长度
                if (textLength > 0 && textLength %4 == 0) {
                    newText = [NSMutableString stringWithString:[newText stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]]];
                    [newText appendString:@" "];
                    [newText appendString:string];
                    textField.text = newText;
                    returnValue = NO;//为什么return NO?因为textField.text = newText;text已经被我们替换好了,那么就不需要系统帮我们添加了,如果你ruturnYES的话,你会发现会多出一个字符串
                }else {
                    [newText appendString:string];
                }
            }else {
                return NO;
            }
        }else { // 如果输入为空,该怎么地怎么地
            [newText replaceCharactersInRange:range withString:string];
        }
        return returnValue;
    }
    return YES;
}
#pragma mark - 键盘

- (void)resignKeyBoard:(UITapGestureRecognizer *)tap{
    [self KeyboardresignFirstResponder];
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField{
    [self KeyboardresignFirstResponder];
    return YES;
}
- (void)KeyboardresignFirstResponder
{
    if ([_CardNum isFirstResponder])//判断是否是第一响应
    {
        [_CardNum resignFirstResponder];
    }
    
    if ([_CardOwn isFirstResponder])//判断是否是第一响应
    {
        [_CardOwn resignFirstResponder];
    }
    
    if ([_UserCardID isFirstResponder]) {
        [_UserCardID resignFirstResponder];
    }
}

#pragma mark - keyboard events -

- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField{
    if (textField == self.CardBankChose) {

        PickerChoiceView *picker = [[PickerChoiceView alloc]initWithFrame:CGRectMake(0, 0, kDeviceWidth, kDeviceHeight-64)DataArr:_bankArr];
        picker.ChoiceType = PickerBankType;
        picker.delegate = self;
        [self.view addSubview:picker];
        [self KeyboardresignFirstResponder];
        return NO;
    }else{
        return YES;
    }
}

- (void)textFieldDidBeginEditing:(UITextField *)textField{
    
    self.EditTextField = textField;
}
///键盘显示事件
- (void) keyboardWillShow:(NSNotification *)notification {
    
    CGFloat kbHeight = [[notification.userInfo objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue].size.height;
    
    CGRect rect = [self.EditTextField.superview convertRect:self.EditTextField.frame toView:self.view];
    
    //计算出键盘顶端到inputTextView panel底端的距离(加上自定义的缓冲距离INTERVAL_KEYBOARD)
    CGFloat offset = (rect.origin.y+rect.size.height) - (kDeviceHeight-kNavigationBarHeight - kbHeight);
    
    // 取得键盘的动画时间，这样可以在视图上移的时候更连贯
    double duration = [[notification.userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey] doubleValue];
    
    //将视图上移计算好的偏移
    if(offset > 0) {
        [UIView animateWithDuration:duration animations:^{
            self.view.frame = CGRectMake(0.0f, -offset, kDeviceWidth, kDeviceHeight-kNavigationBarHeight);
        }];
    }

}

///键盘消失事件
- (void) keyboardWillHide:(NSNotification *)notify {
    // 键盘动画时间
    
    double duration = [[notify.userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey] doubleValue];
    [UIView animateWithDuration:duration animations:^{
        self.view.frame = CGRectMake(0, 64, self.view.frame.size.width, self.view.frame.size.height);
    }];
}

- (void)viewWillDisappear:(BOOL)animated{
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillHideNotification object:nil];
}
/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/
- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch
{
    // 若为UITableViewCellContentView（即点击了tableViewCell），则不截获Touch事件
    if ([NSStringFromClass([touch.view class]) isEqualToString:@"UITableViewCellContentView"]) {
        return NO;
    }
    return  YES;
}


- (IBAction)TipButonClick:(id)sender {
    NSMutableString* str=[[NSMutableString alloc] initWithFormat:@"telprompt://%@",@"400-0571-115"];
    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:str]];
}


- (void)requestLogin{
    
    [[DataRequestServer getDataRequestServerData] requestLoginresult:^(NSString *LoginState) {
        if ([LoginState isEqualToString:@"true"]) {
            [self AddCardClick:nil];
        }else{
            [AddHudView addProgressView:self.view message:@"登录失效，请重新登录"];
            double delayInSeconds = 1.0;
            __block AddCardViewController* BlockVC = self;
            dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
            dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                LoginViewController *loginVc= [[LoginViewController alloc] init];
                loginVc.loginType = logintypeOutTime;
                [BlockVC.navigationController pushViewController:loginVc animated:YES];
            });
            
        }
    }];

}

@end
