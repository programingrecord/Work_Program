//
//  AppDelegate.m
//  SmallCat
//
//  Created by H on 2017/4/19.
//  Copyright © 2017年 HM. All rights reserved.
//

#import "AppDelegate.h"
#import "GesturePasswordController.h"
#import "LCTabBarController.h"
#import "HomeViewController.h"
#import "TradeListViewController.h"
#import "LoginViewController.h"
#import "BaseNavigationViewController.h"
#import "FindFuntionViewController.h"
#import "CenterNewViewController.h"
#import <AdSupport/AdSupport.h>
#import "GuideViewController.h"
#import "UpgradeView.h"


@interface AppDelegate ()<WXApiDelegate,UIAlertViewDelegate>

@property (nonatomic,strong) GesturePasswordController *gesturePassWord;
@property (nonatomic,strong) NSString *downloadUrl;
@property (nonatomic,assign) BOOL isFourceUpdate;

@end

@implementation AppDelegate


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    [NSThread sleepForTimeInterval:1.0];//设置启动页面时间
    
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    [self.window makeKeyAndVisible];
    self.window.backgroundColor = [UIColor whiteColor];
    [UIApplication sharedApplication].statusBarStyle = UIStatusBarStyleDefault;
    [TalkingData sessionStarted:@"EAAE19539DC54A4D9A8F6F9623E3E0FC" withChannelId:@" iOS_APPStore_存管版"];
    
    if ([self isFirstLoad]) {
        GuideViewController *VC= [[GuideViewController alloc] init];
        self.window.rootViewController = VC;
    }else{
        [self loadMainView];
    }
    if ([self isFirstLoad] || ![CoreArchive isUPActivate]) {
        [self postCountData];
    }
    BOOL WX = [WXApi registerApp:@"wxb59d26cd7081005f"];
    
    if (WX) {
        NSLog(@"weixin注册成功");
    }else{
        NSLog(@"weixin注册失败");
    }
    self.isFourceUpdate = NO;
    [self checkNew];
    return YES;
}

- (void)loadMainView{
    _mainVC = [[LCTabBarController alloc] init];
    _mainVC.itemTitleFont =  TEXTFONT(13);
    
    HomeViewController *homeVC = [[HomeViewController alloc] init];
    homeVC.tabBarItem.title = @"首页";
    homeVC.tabBarItem.image = [UIImage imageNamed:@"tab_icon1"];
    homeVC.tabBarItem.selectedImage = [UIImage imageNamed:@"tab_icon1_sel"];
    BaseNavigationViewController *homeNav = [[BaseNavigationViewController alloc] initWithRootViewController:homeVC];

    
    TradeListViewController *TradeVC = [[TradeListViewController alloc] init];
    TradeVC.tabBarItem.title = @"投资";
    TradeVC.tabBarItem.image = [UIImage imageNamed:@"tab_icon2"];
    TradeVC.tabBarItem.selectedImage = [UIImage imageNamed:@"tab_icon2_sel"];
    TradeVC.TradeType = TradeListTypeHome;
    BaseNavigationViewController *TradeNav = [[BaseNavigationViewController alloc] initWithRootViewController:TradeVC];
    
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    NSDictionary *dic = [defaults objectForKey:@"registerData"];
    if ([dic objectForKey:@"UserName"]&&[dic objectForKey:@"PassWord"] ) {
        if ([[dic objectForKey:@"isActivelog"]isEqualToString:@"false"]) {
            LoginViewController *LoginVC = [[LoginViewController alloc] init];
            LoginVC.tabBarItem.title = @"我的";
            LoginVC.hidesBottomBarWhenPushed = YES;
            LoginVC.tabBarItem.image = [UIImage imageNamed:@"tab_icon4"];
            LoginVC.tabBarItem.selectedImage = [UIImage imageNamed:@"tab_icon4_sel"];
            LoginVC.loginType = logintypeHome;
            BaseNavigationViewController *LoginNav = [[BaseNavigationViewController alloc] initWithRootViewController:LoginVC];
            _mainVC.viewControllers = @[homeNav,TradeNav,LoginNav];
        }else{
            CenterNewViewController *CenterVC = [[CenterNewViewController alloc] init];
            CenterVC.tabBarItem.title = @"我的";
            CenterVC.tabBarItem.image = [UIImage imageNamed:@"tab_icon4"];
            CenterVC.tabBarItem.selectedImage = [UIImage imageNamed:@"tab_icon4_sel"];
            BaseNavigationViewController *CenterNav = [[BaseNavigationViewController alloc] initWithRootViewController:CenterVC];
            _mainVC.viewControllers = @[homeNav,TradeNav,CenterNav];
        }
    }else{
        LoginViewController *LoginVC = [[LoginViewController alloc] init];
        LoginVC.tabBarItem.title = @"我的";
        LoginVC.tabBarItem.image = [UIImage imageNamed:@"tab_icon4"];
        LoginVC.tabBarItem.selectedImage = [UIImage imageNamed:@"tab_icon4_sel"];
        LoginVC.loginType = logintypeHome;
        BaseNavigationViewController *LoginNav = [[BaseNavigationViewController alloc] initWithRootViewController:LoginVC];
        _mainVC.viewControllers = @[homeNav,TradeNav,LoginNav];
    }
    _mainVC.tabBar.backgroundColor = [UIColor whiteColor];
    self.window.rootViewController = _mainVC;
}

- (BOOL) isFirstLoad{
    
    NSString *currentVersion = [[[NSBundle mainBundle] infoDictionary]
                                objectForKey:@"CFBundleShortVersionString"];
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    NSString *lastRunVersion = [defaults objectForKey:@"last_run_version_of_application"];
    
    if (!lastRunVersion) {
        [defaults setObject:currentVersion forKey:@"last_run_version_of_application"];
        return YES;
    }
    else if (![lastRunVersion isEqualToString:currentVersion]) {
        [defaults setObject:currentVersion forKey:@"last_run_version_of_application"];
        return YES;
    }
    return NO;
}
- (void)postCountData{
    
    NSString *adId = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];
    NSLog(@"adId=%@",adId);
    NSLog(@"getDeviceID=%@",[TalkingData getDeviceID]);
    
    NSMutableDictionary *parms = [[NSMutableDictionary alloc] initWithDictionary:@{@"appCode":@"7",@"appImei":adId}];
    [[DataRequestServer getDataRequestServerData] request:@"LunaP2pAppActivateDataServlet" parameters:parms result:^(id result) {
        
        if ([result isKindOfClass:[NSString class]] &&  [result isEqualToString:@"44"]) {
            [CoreArchive isUPActivateData:NO];
        }else{
            int t = [[result objectForKey:@"success"] intValue];
            if ([[result objectForKey:@"errorlog"]isEqualToString:@""]&& t==1){
                [CoreArchive isUPActivateData:YES];
            }else{
                [CoreArchive isUPActivateData:NO];
            }
        }
    }];
}

- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
}


- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}


- (void)applicationWillEnterForeground:(UIApplication *)application {
    if (self.isFourceUpdate) {
        [self checkNew];
    };
}


- (void)applicationDidBecomeActive:(UIApplication *)application {
    NSUserDefaults *defaults= [NSUserDefaults standardUserDefaults];
    NSMutableDictionary *dic= [defaults objectForKey:@"gestureWord"];
    
    NSMutableDictionary *userinfoDic= [defaults objectForKey:@"userInfoDetial"];
    
    
    NSMutableDictionary *registerDic= [defaults objectForKey:@"registerData"];
    
    if (userinfoDic && registerDic && [dic objectForKey:@"previousString"]) {
        
        _gesturePassWord = [[GesturePasswordController alloc] init];
        _gesturePassWord.gestureType = GestureVerify;
        [[UIApplication sharedApplication].keyWindow addSubview:_gesturePassWord.view];
        
    }
}


- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}
- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options{
    return [WXApi handleOpenURL:url delegate:self];
}
- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url
{
    return  [WXApi handleOpenURL:url delegate:self];
}
- (void)onResp:(BaseResp *)resp {
    SendMessageToWXResp *sendResp = (SendMessageToWXResp *)resp;
    NSString *TipStr;
    if (sendResp.errCode == WXSuccess) {
        TipStr = @"分享成功";
    }else if(sendResp.errCode == WXErrCodeUserCancel){
        TipStr = @"您已经取消了分享";
    }else{
        TipStr = @"分享失败";
    }
    UIAlertView *Alert = [[UIAlertView alloc] initWithTitle:@"温馨提示" message:TipStr delegate:self cancelButtonTitle:@"取消" otherButtonTitles:nil, nil];
    [Alert show];
}

- (void)checkNew{
    //apptype  1 普通版  2 存管版 
    NSMutableDictionary *parms = [[NSMutableDictionary alloc] initWithDictionary:@{@"apptype":@"2"}];
    [[DataRequestServer getDataRequestServerData] request:@"LunaP2pIosAppVersionServlet" parameters:parms result:^(id result) {

        if ([result isKindOfClass:[NSString class]] &&  [result isEqualToString:@"44"]) {
            
        }else{
            int t = [[result objectForKey:@"success"] intValue];
            if ([[result objectForKey:@"errorlog"]isEqualToString:@""]&& t==1){
                NSLog(@"result=%@",result);
                NSArray *arr = [result objectForKey:@"items"];
                if (arr.count>0) {
                    NSDictionary *Dic= (NSDictionary *)arr[0];
                    [self checkNewWithDic:Dic];
                }
            }else{
            }
        }
    }];
    
}
- (void)checkNewWithDic:(NSDictionary *)dic{
    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];
    NSString *appCurVersion = [infoDictionary objectForKey:@"CFBundleShortVersionString"];
    
    NSMutableArray* LocationArr = (NSMutableArray*) [appCurVersion componentsSeparatedByString: @"."];
    
    
    NSString *SeverVersion = [NSString stringWithFormat:@"%@",[dic objectForKey:@"iosVersion"]];
    NSMutableArray* SeverArr = (NSMutableArray*) [SeverVersion componentsSeparatedByString: @"."];
    
    while (LocationArr.count < SeverArr.count) { [LocationArr addObject: @"0"]; }
    while (SeverArr.count < LocationArr.count) { [SeverArr addObject: @"0"]; }
    NSInteger minArrayLength = MIN(LocationArr.count, SeverArr.count);
    
    BOOL needUpdate = NO;
    for(int i=0;i<minArrayLength;i++){//以最短的数组长度为遍历次数,防止数组越界
        NSString *localElement = LocationArr[i];
        NSString *appElement = SeverArr[i];
        NSInteger  localValue =  localElement.integerValue;
        NSInteger  appValue = appElement.integerValue;
        if(localValue<appValue) {
            needUpdate = YES;
            break;
        }else{
            needUpdate = NO;
        }
    }
    if (needUpdate) {
        self.downloadUrl = [dic objectForKey:@"downloadUrl"];
        NSString *isFourceUpdate = [NSString stringWithFormat:@"%@",[dic objectForKey:@"isFourceUpdate"]];
        UpgradeView *V = [[UpgradeView alloc] initWithFrame:CGRectZero];
        V.InfoLabel.text = [NSString stringWithFormat:@"%@",[dic objectForKey:@"versionNote"]];
        if ([isFourceUpdate isEqualToString:@"1"]) {
            self.isFourceUpdate = YES;
            V.CloseButton.hidden = YES;
        }else{
            self.isFourceUpdate = NO;
            V.CloseButton.hidden = NO;
        }
        [V show];
        V.ButtonBlock = ^{
            NSString* encodedString = [self.downloadUrl stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:encodedString]];
        };
    }
}
@end
